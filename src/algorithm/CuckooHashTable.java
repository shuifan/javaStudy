package algorithm;

import lombok.Data;

/**
 * 基于一个散列函数，辅以分离链接或开放定址来解决散列冲突的散列表的
 * 问题在于：平均操作时间为 O(1) ，最差情况下的访问时间是不可控的
 * 原因在于 链表可能很长，或者在一个大的数组里需要定址很多次才能找
 * 到合适的位置
 *
 * 布谷鸟散列，通过引入多个散列函数以及一个或多个数组，每个值的最差
 * 访问时间为 O（散列函数的数量），散列函数的数量应当是一个很小的值，
 * 从而 布谷鸟散列有明确的操作时间下界
 *
 * 布谷鸟散列的问题在于 散列函数的选择直接影响到性能，十分关键
 * @param <T>
 */
@Data
public class CuckooHashTable<T> {
}
